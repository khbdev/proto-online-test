// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/test/test.proto

package testpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestService_CreateSection_FullMethodName           = "/test.TestService/CreateSection"
	TestService_GetSectionById_FullMethodName          = "/test.TestService/GetSectionById"
	TestService_GetAllSections_FullMethodName          = "/test.TestService/GetAllSections"
	TestService_UpdateSection_FullMethodName           = "/test.TestService/UpdateSection"
	TestService_DeleteSection_FullMethodName           = "/test.TestService/DeleteSection"
	TestService_CreateQuestion_FullMethodName          = "/test.TestService/CreateQuestion"
	TestService_GetQuestionById_FullMethodName         = "/test.TestService/GetQuestionById"
	TestService_GetAllQuestions_FullMethodName         = "/test.TestService/GetAllQuestions"
	TestService_UpdateQuestion_FullMethodName          = "/test.TestService/UpdateQuestion"
	TestService_DeleteQuestion_FullMethodName          = "/test.TestService/DeleteQuestion"
	TestService_CreateOption_FullMethodName            = "/test.TestService/CreateOption"
	TestService_GetOptionById_FullMethodName           = "/test.TestService/GetOptionById"
	TestService_GetAllOptions_FullMethodName           = "/test.TestService/GetAllOptions"
	TestService_UpdateOption_FullMethodName            = "/test.TestService/UpdateOption"
	TestService_DeleteOption_FullMethodName            = "/test.TestService/DeleteOption"
	TestService_GetFullSectionStructure_FullMethodName = "/test.TestService/GetFullSectionStructure"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	// ===== SECTION CRUD =====
	CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*Section, error)
	GetSectionById(ctx context.Context, in *SectionID, opts ...grpc.CallOption) (*GetSectionResponse, error)
	GetAllSections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSectionsResponse, error)
	UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*Section, error)
	DeleteSection(ctx context.Context, in *SectionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ===== QUESTION CRUD =====
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*Question, error)
	GetQuestionById(ctx context.Context, in *QuestionID, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	GetAllQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllQuestionsResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Question, error)
	DeleteQuestion(ctx context.Context, in *QuestionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ===== OPTION CRUD =====
	CreateOption(ctx context.Context, in *CreateOptionRequest, opts ...grpc.CallOption) (*Option, error)
	GetOptionById(ctx context.Context, in *OptionID, opts ...grpc.CallOption) (*GetOptionResponse, error)
	GetAllOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllOptionsResponse, error)
	UpdateOption(ctx context.Context, in *UpdateOptionRequest, opts ...grpc.CallOption) (*Option, error)
	DeleteOption(ctx context.Context, in *OptionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ===== FULL STRUCTURE (Queue Job uchun) =====
	GetFullSectionStructure(ctx context.Context, in *GetFullSectionRequest, opts ...grpc.CallOption) (*GetFullSectionResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, TestService_CreateSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetSectionById(ctx context.Context, in *SectionID, opts ...grpc.CallOption) (*GetSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSectionResponse)
	err := c.cc.Invoke(ctx, TestService_GetSectionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetAllSections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSectionsResponse)
	err := c.cc.Invoke(ctx, TestService_GetAllSections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, TestService_UpdateSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteSection(ctx context.Context, in *SectionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestService_DeleteSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Question)
	err := c.cc.Invoke(ctx, TestService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetQuestionById(ctx context.Context, in *QuestionID, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, TestService_GetQuestionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetAllQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllQuestionsResponse)
	err := c.cc.Invoke(ctx, TestService_GetAllQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Question)
	err := c.cc.Invoke(ctx, TestService_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteQuestion(ctx context.Context, in *QuestionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) CreateOption(ctx context.Context, in *CreateOptionRequest, opts ...grpc.CallOption) (*Option, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Option)
	err := c.cc.Invoke(ctx, TestService_CreateOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetOptionById(ctx context.Context, in *OptionID, opts ...grpc.CallOption) (*GetOptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptionResponse)
	err := c.cc.Invoke(ctx, TestService_GetOptionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetAllOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOptionsResponse)
	err := c.cc.Invoke(ctx, TestService_GetAllOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateOption(ctx context.Context, in *UpdateOptionRequest, opts ...grpc.CallOption) (*Option, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Option)
	err := c.cc.Invoke(ctx, TestService_UpdateOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteOption(ctx context.Context, in *OptionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestService_DeleteOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetFullSectionStructure(ctx context.Context, in *GetFullSectionRequest, opts ...grpc.CallOption) (*GetFullSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFullSectionResponse)
	err := c.cc.Invoke(ctx, TestService_GetFullSectionStructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility.
type TestServiceServer interface {
	// ===== SECTION CRUD =====
	CreateSection(context.Context, *CreateSectionRequest) (*Section, error)
	GetSectionById(context.Context, *SectionID) (*GetSectionResponse, error)
	GetAllSections(context.Context, *emptypb.Empty) (*GetAllSectionsResponse, error)
	UpdateSection(context.Context, *UpdateSectionRequest) (*Section, error)
	DeleteSection(context.Context, *SectionID) (*emptypb.Empty, error)
	// ===== QUESTION CRUD =====
	CreateQuestion(context.Context, *CreateQuestionRequest) (*Question, error)
	GetQuestionById(context.Context, *QuestionID) (*GetQuestionResponse, error)
	GetAllQuestions(context.Context, *emptypb.Empty) (*GetAllQuestionsResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Question, error)
	DeleteQuestion(context.Context, *QuestionID) (*emptypb.Empty, error)
	// ===== OPTION CRUD =====
	CreateOption(context.Context, *CreateOptionRequest) (*Option, error)
	GetOptionById(context.Context, *OptionID) (*GetOptionResponse, error)
	GetAllOptions(context.Context, *emptypb.Empty) (*GetAllOptionsResponse, error)
	UpdateOption(context.Context, *UpdateOptionRequest) (*Option, error)
	DeleteOption(context.Context, *OptionID) (*emptypb.Empty, error)
	// ===== FULL STRUCTURE (Queue Job uchun) =====
	GetFullSectionStructure(context.Context, *GetFullSectionRequest) (*GetFullSectionResponse, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceServer struct{}

func (UnimplementedTestServiceServer) CreateSection(context.Context, *CreateSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSection not implemented")
}
func (UnimplementedTestServiceServer) GetSectionById(context.Context, *SectionID) (*GetSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionById not implemented")
}
func (UnimplementedTestServiceServer) GetAllSections(context.Context, *emptypb.Empty) (*GetAllSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSections not implemented")
}
func (UnimplementedTestServiceServer) UpdateSection(context.Context, *UpdateSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSection not implemented")
}
func (UnimplementedTestServiceServer) DeleteSection(context.Context, *SectionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSection not implemented")
}
func (UnimplementedTestServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedTestServiceServer) GetQuestionById(context.Context, *QuestionID) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionById not implemented")
}
func (UnimplementedTestServiceServer) GetAllQuestions(context.Context, *emptypb.Empty) (*GetAllQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestions not implemented")
}
func (UnimplementedTestServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedTestServiceServer) DeleteQuestion(context.Context, *QuestionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedTestServiceServer) CreateOption(context.Context, *CreateOptionRequest) (*Option, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOption not implemented")
}
func (UnimplementedTestServiceServer) GetOptionById(context.Context, *OptionID) (*GetOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionById not implemented")
}
func (UnimplementedTestServiceServer) GetAllOptions(context.Context, *emptypb.Empty) (*GetAllOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOptions not implemented")
}
func (UnimplementedTestServiceServer) UpdateOption(context.Context, *UpdateOptionRequest) (*Option, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOption not implemented")
}
func (UnimplementedTestServiceServer) DeleteOption(context.Context, *OptionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOption not implemented")
}
func (UnimplementedTestServiceServer) GetFullSectionStructure(context.Context, *GetFullSectionRequest) (*GetFullSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullSectionStructure not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}
func (UnimplementedTestServiceServer) testEmbeddedByValue()                     {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_CreateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CreateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_CreateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CreateSection(ctx, req.(*CreateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetSectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetSectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetSectionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetSectionById(ctx, req.(*SectionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetAllSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetAllSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetAllSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetAllSections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UpdateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateSection(ctx, req.(*UpdateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_DeleteSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteSection(ctx, req.(*SectionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetQuestionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetQuestionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetQuestionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetQuestionById(ctx, req.(*QuestionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetAllQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetAllQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetAllQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetAllQuestions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteQuestion(ctx, req.(*QuestionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_CreateOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CreateOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_CreateOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CreateOption(ctx, req.(*CreateOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetOptionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetOptionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetOptionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetOptionById(ctx, req.(*OptionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetAllOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetAllOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetAllOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetAllOptions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UpdateOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateOption(ctx, req.(*UpdateOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_DeleteOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteOption(ctx, req.(*OptionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetFullSectionStructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetFullSectionStructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_GetFullSectionStructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetFullSectionStructure(ctx, req.(*GetFullSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSection",
			Handler:    _TestService_CreateSection_Handler,
		},
		{
			MethodName: "GetSectionById",
			Handler:    _TestService_GetSectionById_Handler,
		},
		{
			MethodName: "GetAllSections",
			Handler:    _TestService_GetAllSections_Handler,
		},
		{
			MethodName: "UpdateSection",
			Handler:    _TestService_UpdateSection_Handler,
		},
		{
			MethodName: "DeleteSection",
			Handler:    _TestService_DeleteSection_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _TestService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestionById",
			Handler:    _TestService_GetQuestionById_Handler,
		},
		{
			MethodName: "GetAllQuestions",
			Handler:    _TestService_GetAllQuestions_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _TestService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _TestService_DeleteQuestion_Handler,
		},
		{
			MethodName: "CreateOption",
			Handler:    _TestService_CreateOption_Handler,
		},
		{
			MethodName: "GetOptionById",
			Handler:    _TestService_GetOptionById_Handler,
		},
		{
			MethodName: "GetAllOptions",
			Handler:    _TestService_GetAllOptions_Handler,
		},
		{
			MethodName: "UpdateOption",
			Handler:    _TestService_UpdateOption_Handler,
		},
		{
			MethodName: "DeleteOption",
			Handler:    _TestService_DeleteOption_Handler,
		},
		{
			MethodName: "GetFullSectionStructure",
			Handler:    _TestService_GetFullSectionStructure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/test/test.proto",
}
